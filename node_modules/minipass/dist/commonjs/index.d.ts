/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { EventEmitter } from 'events';
import { StringDecoder } from 'string_decoder';
/**
 * Same as StringDecoder, but exposing the `lastNeed` flag on the type
 */
type SD = StringDecoder & {
    lastNeed: boolean;
};
export type { SD, Pipe, PipeProxyErrors };
/**
 * Return true if the argument is a Minipass stream, Node stream, or something
 * else that Minipass can interact with.
 */
export declare const isStream: (s: any) => s is NodeJS.WriteStream | NodeJS.ReadStream | Minipass<any, any, any> | (NodeJS.ReadStream & {
    fd: number;
}) | (EventEmitter & {
    pause(): any;
    resume(): any;
    pipe(...destArgs: any[]): any;
}) | (NodeJS.WriteStream & {
    fd: number;
}) | (EventEmitter & {
    end(): any;
    write(chunk: any, ...args: any[]): any;
});
/**
 * Return true if the argument is a valid {@link Minipass.Readable}
 */
export declare const isReadable: (s: any) => s is Minipass.Readable;
/**
 * Return true if the argument is a valid {@link Minipass.Writable}
 */
export declare const isWritable: (s: any) => s is Minipass.Readable;
declare const EOF: unique symbol;
declare const MAYBE_EMIT_END: unique symbol;
declare const EMITTED_END: unique symbol;
declare const EMITTING_END: unique symbol;
declare const EMITTED_ERROR: unique symbol;
declare const CLOSED: unique symbol;
declare const READ: unique symbol;
declare const FLUSH: unique symbol;
declare const FLUSHCHUNK: unique symbol;
declare const ENCODING: unique symbol;
declare const DECODER: unique symbol;
declare const FLOWING: unique symbol;
declare const PAUSED: unique symbol;
declare const RESUME: unique symbol;
declare const BUFFER: unique symbol;
declare const PIPES: unique symbol;
declare const BUFFERLENGTH: unique symbol;
declare const BUFFERPUSH: unique symbol;
declare const BUFFERSHIFT: unique symbol;
declare const OBJECTMODE: unique symbol;
declare const DESTROYED: unique symbol;
declare const ERROR: unique symbol;
declare const EMITDATA: unique symbol;
declare const EMITEND: unique symbol;
declare const EMITEND2: unique symbol;
declare const ASYNC: unique symbol;
declare const ABORT: unique symbol;
declare const ABORTED: unique symbol;
declare const SIGNAL: unique symbol;
declare const DATALISTENERS: unique symbol;
declare const DISCARDED: unique symbol;
/**
 * Options that may be passed to stream.pipe()
 */
export interface PipeOptions {
    /**
     * end the destination stream when the source stream ends
     */
    end?: boolean;
    /**
     * proxy errors from the source stream to the destination stream
     */
    proxyErrors?: boolean;
}
/**
 * Internal class representing a pipe to a destination stream.
 *
 * @internal
 */
declare class Pipe<T extends unknown> {
    src: Minipass<T>;
    dest: Minipass<any, T>;
    opts: PipeOptions;
    ondrain: () => any;
    constructor(src: Minipass<T>, dest: Minipass.Writable, opts: PipeOptions);
    unpipe(): void;
    proxyErrors(_er: any): void;
    end(): void;
}
/**
 * Internal class representing a pipe to a destination stream where
 * errors are proxied.
 *
 * @internal
 */
declare class PipeProxyErrors<T> extends Pipe<T> {
    unpipe(): void;
    constructor(src: Minipass<T>, dest: Minipass.Writable, opts: PipeOptions);
}
export declare namespace Minipass {
    /**
     * Encoding used to create a stream that outputs strings rather than
     * Buffer objects.
     */
    export type Encoding = BufferEncoding | 'buffer' | null;
    /**
     * Any stream that Minipass can pipe into
     */
    export type Writable = Minipass<any, any, any> | NodeJS.WriteStream | (NodeJS.WriteStream & {
        fd: number;
    }) | (EventEmitter & {
        end(): any;
        write(chunk: any, ...args: any[]): any;
    });
    /**
     * Any stream that can be read from
     */
    export type Readable = Minipass<any, any, any> | NodeJS.ReadStream | (NodeJS.ReadStream & {
        fd: number;
    }) | (EventEmitter & {
        pause(): any;
        resume(): any;
        pipe(...destArgs: any[]): any;
    });
    /**
     * Utility type that can be iterated sync or async
     */
    export type DualIterable<T> = Iterable<T> & AsyncIterable<T>;
    type EventArguments = Record<string | symbol, unknown[]>;
    /**
     * The listing of events that a Minipass class can emit.
     * Extend this when extending the Minipass class, and pass as
     * the third template argument.  The key is the name of the event,
     * and the value is the argument list.
     *
     * Any undeclared events will still be allowed, but the handler will get
     * arguments as `unknown[]`.
     */
    export interface Events<RType extends any = Buffer> extends EventArguments {
        readable: [];
        data: [chunk: RType];
        error: [er: unknown];
        abort: [reason: unknown];
        drain: [];
        resume: [];
        end: [];
        finish: [];
        prefinish: [];
        close: [];
        [DESTROYED]: [er?: unknown];
        [ERROR]: [er: unknown];
    }
    /**
     * String or buffer-like data that can be joined and sliced
     */
    export type ContiguousData = Buffer | ArrayBufferLike | ArrayBufferView | string;
    export type BufferOrString = Buffer | string;
    /**
     * Options passed to the Minipass constructor.
     */
    export type SharedOptions = {
        /**
         * Defer all data emission and other events until the end of the
         * current tick, similar to Node core streams
         */
        async?: boolean;
        /**
         * A signal which will abort the stream
         */
        signal?: AbortSignal;
        /**
         * Output string encoding. Set to `null` or `'buffer'` (or omit) to
         * emit Buffer objects rather than strings.
         *
         * Conflicts with `objectMode`
         */
        encoding?: BufferEncoding | null | 'buffer';
        /**
         * Output data exactly as it was written, supporting non-buffer/string
         * data (such as arbitrary objects, falsey values, etc.)
         *
         * Conflicts with `encoding`
         */
        objectMode?: boolean;
    };
    /**
     * Options for a string encoded output
     */
    export type EncodingOptions = SharedOptions & {
        encoding: BufferEncoding;
        objectMode?: false;
    };
    /**
     * Options for contiguous data buffer output
     */
    export type BufferOptions = SharedOptions & {
        encoding?: null | 'buffer';
        objectMode?: false;
    };
    /**
     * Options for objectMode arbitrary output
     */
    export type ObjectModeOptions = SharedOptions & {
        objectMode: true;
        encoding?: null;
    };
    /**
     * Utility type to determine allowed options based on read type
     */
    export type Options<T> = T extends string ? EncodingOptions | ObjectModeOptions : T extends Buffer ? BufferOptions | ObjectModeOptions : SharedOptions;
    export {};
}
/**
 * Main export, the Minipass class
 *
 * `RType` is the type of data emitted, defaults to Buffer
 *
 * `WType` is the type of data to be written, if RType is buffer or string,
 * then any {@link Minipass.ContiguousData} is allowed.
 *
 * `Events` is the set of event handler signatures that this object
 * will emit, see {@link Minipass.Events}
 */
export declare class Minipass<RType extends unknown = Buffer, WType extends unknown = RType extends Minipass.BufferOrString ? Minipass.ContiguousData : RType, Events extends Minipass.Events<RType> = Minipass.Events<RType>> extends EventEmitter implements Minipass.DualIterable<RType> {
    [FLOWING]: boolean;
    [PAUSED]: boolean;
    [PIPES]: Pipe<RType>[];
    [BUFFER]: RType[];
    [OBJECTMODE]: boolean;
    [ENCODING]: BufferEncoding | null;
    [ASYNC]: boolean;
    [DECODER]: SD | null;
    [EOF]: boolean;
    [EMITTED_END]: boolean;
    [EMITTING_END]: boolean;
    [CLOSED]: boolean;
    [EMITTED_ERROR]: unknown;
    [BUFFERLENGTH]: number;
    [DESTROYED]: boolean;
    [SIGNAL]?: AbortSignal;
    [ABORTED]: boolean;
    [DATALISTENERS]: number;
    [DISCARDED]: boolean;
    /**
     * true if the stream can be written
     */
    writablea   þ e s s a   a t r i ð i s   v a r   f j a r l æ g ð . ‹ N ý r r i   ú t g á f u   a f   þ e s s u   a t r i ð i   h e f u r   þ e g a r   v e r i ð   b r e y t t .   A ð r i r   n o t e n d u r   g e t a   e k k i   b r e y t t   a t r i ð i n u   f y r r   e n   s ú   ú t g á f a   e r   s a m þ y k k t   e ð a   g e f i n   ú t . _ E k k i   t ó k s t   a ð   h l a ð a   þ e s s u   a t r i ð i   u p p .   A t r i ð i   m e ð   % 1 ! s !   e r   þ e g a r   t i l   í   d á l k n u m   % 2 ! s !   á   l i s t a n u m . Y Þ e t t a   a t r i ð i   e r   e k k i   l e n g u r   t i l .   A n n a r   n o t a n d i   g æ t i   h a f a   e y t t   þ v í   e ð a   þ a ð   e r   í   ö ð r u   t æ k i . " E k k i   t ó k s t   a ð   a f r i t a   a t r i ð i :   % 1 ! s ! ' S u m   a t r i ð i   k u n n a   a ð   h a f a   v e r i ð   a f r i t u ð .  H æ t t   v a r   v i ð   a ð g e r ð i n a . , I n n r i   v i l l a   k o m   u p p .   R e y n d u   a ð g e r ð i n a   a f t u r .     PA      $ V i l l a   k o m   u p p   v i ð   a ð   s t a ð f e s t a   g ö g n . / T i l g r e i n a   þ a r f   g i l d i   f y r i r   þ e n n a n   á s k i l d a   r e i t . $ Þ e t t a   g i l d i   e r   þ e g a r   t i l   í   l i s t a n u m . ) I n n t a k   e r   y f i r   h á m a r k s l e n g d ,   s e m   e r   % 1 ! s ! 9 G i l d i   þ e s s a   s v æ ð i s   v e r ð u r   a ð   v e r a   á   m i l l i   % 1 ! s !   o g   % 2 ! s ! . = G i l d i   þ e s s a   r e i t s   v e r ð u r   a ð   v e r a   m i n n a   e n   e ð a   j a f n t   o g   % 1 ! s ! . > G i l d i   þ e s s a   r e i t s   v e r ð u r   a ð   v e r a   s t æ r r a   e n   e ð a   j a f n t   o g   % 1 ! s ! .  A ð e i n s   t ö l u r   g e t a   f a r i ð   h é r . & S l á ð u   i n n   d a g s e t n i n g u   s v o n a :   2 / 2 3 / 2 0 1 2 > S l á ð u   i n n   d a g s e t n i n g u   o g   t í m a   á   þ e n n a n   h á t t :   2 / 2 3 / 2 0 1 2   2 : 2 5   P M A T i l g r e i n a   þ a r f   g i l d a   d a g s e t n i n g u   á   b i l i n u   1 / 1 / 1 9 0 0   o g   1 2 / 3 1 / 8 9 0 0 .  Ó g i l d   v e f s l ó ð :   % 1 ! s ! . ) I n n t a k s s t r e n g u r   v a r   e k k i   m e ð   r é t t u   s n i ð i . PA% G i l d i   þ e s s a   s v æ ð i s   e r   e k k i   g i l d   t a l a .  S t a ð f e s t i n g   d á l k s   t ó k s t   e k k i . $ S t a ð f e s t i n g   l i s t a a t r i ð i s   t ó k s t   e k k i . " S t a ð f e s t i n g   l i s t a g a g n a   t ó k s t   e k k i . ê T i l g r e i n t   s k r á a r -   e ð a   m ö p p u h e i t i   e r   o f   l a n g t .   V e f s l ó ð   a l l r a   s k r á a   o g   m a p p a   v e r ð u r   a ð   v e r a   4 0 0   s t a f i r   e ð a   s t y t t r i   ( o g   e k k i   l e n g r i   e n   4 0 0   s t a f i r   f y r i r   e i t t   s k r á a r -   e ð a   m ö p p u h e i t i   í   v e f s l ó ð i n n i ) .   S l á ð u   i n n   s t y t t r a   s k r á a r -   e ð a   m ö p p u h e i t i . T A ð g e r ð i n   s e m   v a r   r e y n d   e r   b ö n n u ð   v e g n a   þ e s s   a ð   h ú n   f e r   y f i r   h á m a r k   l i s t a y f i r l i t s i n s . V Ó g i l t   t e x t a g i l d i . 
 
 T e x t a r e i t u r   i n n i h e l d u r   ó g i l d   g ö g n .   A t h u g a ð u   g i l d i ð   o g   r e y n d u   a f t u r . . S k r á   e ð a   m a p p a   m e ð   h e i t i n u   % 1 ! s !   e r   þ e g a r   t i l . K E k k i   e r   h æ g t   a ð   e n d u r n e f n a   " % 1 ! s ! "   í   " % 2 ! s ! " :   á f a n g a s t a ð u r i n n   e r   þ e g a r   t i l . 3 E n g i n   s k r á   m e ð   v e f s l ó ð i n n i   ' % 1 ! s ! '   e r   á   þ e s s u m   v e f . B Þ e s s a   a ð g e r ð   e r   a ð e i n s   h æ g t   a ð   f r a m k v æ m a   á   s k r á ;   " % 1 ! s ! "   e r   m a p p a . A E k k i   e r   h æ g t   a ð   f æ r a   a t r i ð i   þ a r   s e m   m a p p a n   i n n i h e l d u r   v i ð t ö k u s t a ð " S l á ð u   i n n   d a g s e t n i n g u   s v o n a :   % 1 ! s ! * S l á ð u   i n n   d a g s e t n i n g u   o g   t í m a   s v o n a :   % 1 ! s !  V i ð t ö k u s k r á i n   e r   þ e g a r   t i l . 9 A t r i ð i ð   e r   e k k i   t i l .   A n n a r   n o t a n d i   k a n n   a ð   h a f a   e y t t   þ v í . PA S k r á a r f j ö l d i   y f i r   m ö r k u m . ` S k r á i n   h e f u r   e k k i   v e r i ð   a t h u g u ð .   F y r s t   þ a r f   a ð   a t h u g a   þ e t t a   s k j a l   á ð u r   e n   b r e y t i n g a r   e r u   g e r ð a r . h E k k i   v a r   h æ g t   a ð   f æ r a   s k r á n a   þ v í   l o k a ð   e r   f y r i r   b r e y t i n g a r   á   h e n n i   e ð a   b ú i ð   e r   a ð   b r e y t a   e ð a   e y ð a   h e n n i . C V i ð t ö k u s l ó ð i n   g e t u r   e k k i   v e r i ð   s ú   s a m a   o g   u p p r u n a h l u t u r i n n   s j á l f u r . i E k k i   v a r   h æ g t   a ð   a f r i t a   l i s t a a t r i ð i ð   þ a r   s e m   t v í t e k i n   g i l d i   f u n d u s t   í   e i n u m   e ð a   f l e i r i   r e i t u m   á   l i s t a n u m .                       PA F y r i r   n o k k r u m   s e k ú n d u m  F y r i r   u m   m í n ú t u  f y r i r   % 1 ! s !   m í n ú t u m  F y r i r   u m   k l u k k u s t u n d  F y r i r   % 1 ! s !   k l u k k u s t u n d u m  Í   d a g  Í   g æ r  Í   g æ r   k l u k k a n   % 1 ! s !  F y r i r   % 1 ! s !   d ö g u m  E f t i r   u m   þ a ð   b i l   m í n ú t u  E f t i r   % 1 ! s !   m í n ú t u r  E f t i r   u m   þ a ð   b i l   k l u k k u s t u n d  E f t i r   % 1 ! s !   t í m a  Á   m o r g u n  Á   m o r g u n   k l u k k a n   % 1 ! s !  E f t i r   % 1 ! s !   d a g a PA % 1 ! s !   k l .   % 2 ! s !  % 1 ! s ! ,   % 2 ! s !  6 4   b i t a 	 F o r s k o ð u n  A R M 6 4  F o r ú t g á f u r   a f   s m í ð u m  F a r a   t i l   b a k a   í   x 8 6 - s m í ð  S æ k t u   A R M 6 4 - s m í ð $ S æ k t u   O n e D r i v e - f o r r i t i ð   f y r i r   A R M 6 4 . < O n e D r i v e - f o r r i t i ð   þ i t t   v e r ð u r   u p p f æ r t   í   s m í ð i n a   f y r i r   A R M 6 4 . U O n e D r i v e - f o r r i t i ð   þ i t t   v e r ð u r   s k i p t   a f t u r   y f i r   í   h e r m d u   s m í ð i n a   f y r i r   I n t e l - ö r g j ö r v a .        U p p f æ r a  S j á   f r í ð i n d i A Þ ú   þ a r f t   m e i r a   g e y m s l u p l á s s   t i l   a ð   h a l d a   á f r a m   a ð   s a m s t i l l a   s k r á r           ! K y n n t u   þ é r   s v æ ð i ð   þ i t t   á   O n e D r i v e = K y n n t u   þ é r   h v e r n i g   þ ú   v e r n d a r   s k r á r   o g   m i n n i n g a r   m e ð   O n e D r i v e  E k k i   t ó k s t   a ð   h l a ð a   u p p   s k r á m K G e y m s l a   e r   f u l l      f á ð u   þ é r   m e i r a   g e y m s l u p l á s s   t i l   a ð   h l a ð a   u p p   n ý j u m   s k r á m .  S æ k j a   O n e D r i v e - f a r s í m a f o r r i t i ð D T a k t u   ö r y g g i s a f r i t   a f   m y n d u m   s í m a n s   o g   n j ó t t u   þ e i r r a   í   þ e s s a r i   t ö l v u + S æ k t u   f a r s í m a f o r r i t i ð   t i l   a ð   h e f j a s t   h a n d a . B V e r i ð   e r   a ð   t a k a   ö r y g g i s a f r i t   a f   m y n d u m   í   s í m a n u m   þ í n u m   á   O n e D r i v e - S k o ð a   þ æ r   í   m y n d a m ö p p u   þ i n n i   í   s k r á a v a f r a n u m . * Þ e s s i   s k r á   s a m s t i l l i s t   e k k i   v i ð   t æ k i ð   þ i t t PA E k k i   e r   h æ g t   a ð   o p n a   þ e s s a   s k r á   í   s k j á b o r ð s f o r r i t i   þ v í   h ú n   s a m s t i l l i s t   e k k i   v i ð   t æ k i ð   þ i t t .   < a   h r e f = " # " > F r e k a r i   u p p l ý s i n g a r < / a >  É g   s k i l  S k o ð a   f æ r s l u r     
 S k a n n a r . . .      F á   m e i r a   g e y m s l u p l á s s  G e r i   þ a ð   s e i n n a        S a m s t i l l i r . . . / S a m s t i l l t u   f l e i r i   s k r á r   m e ð   m e i r a   g e y m s l u p l á s s i A F á ð u   m e i r a   g e y m s l u p l á s s   t i l   a ð   s a m s t i l l a   o g   v e r j a   m ö p p u r n a r   þ í n a r  E k k i   e r   h æ g t   a ð   s a m s t i l l a  V i l l a   © H e i t i   % 1   í   % 2   e r   o f   l a n g t   f y r i r   O n e D r i v e   t i l   a ð   h a l d a   á f r a m   m e ð   ö r y g g i s a f r i t u n   m ö p p u .   S t y t t u   h e i t i   s k r á a r i n n a r   e ð a   f æ r ð u   h a n a   f y r i r   u t a n   m i k i l v æ g a   m ö p p u   o g   r e y n d u   a f t u r . ” % 1   í   % 2   e r   y f i r   h á m a r k s s t æ r ð   s k r á a r   s e m   O n e D r i v e   s t y ð u r .   T i l   a ð   h a l d a   ö r y g g i s a f r i t u n   á f r a m   s k a l t u   f æ r a   h a n a   ú t   f y r i r   m i k i l v æ g a   m ö p p u   o g   r e y n a   a f t u r . š % 1   í   % 2   e r   s k r á a r t e n g i n g   e ð a   m ö p p u s t a ð g e n g i l l   o g   e k k i   e r   h æ g t   a ð   t a k a   ö r y g g i s a f r i t   a f   h e n n i .   T i l   a ð   h a l d a   á f r a m ,   f æ r a   e ð a   e y ð a   þ e s s u   a t r i ð i   o g   r e y n a   a f t u r = Þ ú   v e r ð u r   e n g a   s t u n d   a ð   k l á r a   g e y m s l u p l á s s i ð   þ i t t   á   O n e D r i v e ! B M e ð   þ e s s u   á f r a m h a l d i   g æ t i   g e y m s l u p l á s s i ð   k l á r a s t   e f t i r   e i n n   m á n u ð . D M e ð   þ e s s u   á f r a m h a l d i   g æ t i   g e y m s l u p l á s s i ð   k l á r a s t   e f t i r   % 1 ! s !   m á n u ð i . A M e ð   þ e s s u   á f r a m h a l d i   g æ t i   g e y m s l u p l á s s i ð   k l á r a s t   e f t i r   e i n a   v i k u . C M e ð   þ e s s u   á f r a m h a l d i   g æ t i   g e y m s l u p l á s s i ð   k l á r a s t   e f t i r   % 1 ! s !   v i k u r . : M e ð   þ e s s u   á f r a m h a l d i   g æ t i   g e y m s l u p l á s s i ð   k l á r a s t   á   m o r g u n ! B M e ð   þ e s s u   á f r a m h a l d i   g æ t i   g e y m s l u p l á s s i ð   k l á r a s t   e f t i r   % 1 ! s !   d a g a .  F á   m e i r a   g e y m s l u p l á s s  Ú r v a l s e i g i n l e i k a r   q % 1   í   % 2   e r   m e ð   h e i t i   s e m   e k k i   e r   l e y f t   í   O n e D r i v e .   T i l   a ð   h a l d a   á f r a m   s k a l t u   e n d u r n e f n a   e ð a   f j a r l æ g j a   þ e s s a   s k r á . Y M a p p a n   % 1   i n n i h e l d u r   a ð r a r   m i k i l v æ g a r   m ö p p u r   o g   e r   e k k i   s t u d d   f y r i r   ö r y g g i s a f r i t u n   s k r á a . ¹ E k k i   e r   h æ g t   a ð   s e t j a   u p p   ö r y g g i s a f r i t u n   á   m ö p p u   þ v í   a ð   % 1   e r   í   % 2   o g   O n e D r i v e   e r   s e t t   u p p   í   % 3 .   A l l a r   m ö p p u r   þ u r f a   a ð   v e r a   á   s a m a   d r i f i   o g   O n e D r i v e   s v o   h æ g t   s é   a ð   h e f j a   ö r y g g i s a f r i t u n .   · E k k i   e r   h æ g t   a ð   t a k a   ö r y g g i s a f r i t   a f   % 1   þ v í   a ð   þ ú   e r t   e k k i   a ð   s a m s t i l l a   m ö p p u n a   % 2   v i ð   þ e t t a   t æ k i .   T i l   a ð   h a l d a   á f r a m   s k a l t u   v e l j a   m ö p p u n a   % 3   f y r i r   s a m s t i l l i 