length !== nextSignature.length) {\n      return true;\n    }\n    for (let i = 0; i < nextSignature.length; i++) {\n      if (prevSignature[i] !== nextSignature[i]) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // When this signature changes, it's unsafe to stop at this refresh boundary.\n  var getRefreshBoundarySignature = (Refresh, moduleExports) => {\n    const signature = [];\n    signature.push(Refresh.getFamilyByType(moduleExports));\n    if (moduleExports == null || typeof moduleExports !== \"object\") {\n      // Exit if we can't iterate over exports.\n      // (This is important for legacy environments.)\n      return signature;\n    }\n    for (const key in moduleExports) {\n      if (key === \"__esModule\") {\n        continue;\n      }\n      const desc = Object.getOwnPropertyDescriptor(moduleExports, key);\n      if (desc && desc.get) {\n        continue;\n      }\n      const exportValue = moduleExports[key];\n      signature.push(key);\n      signature.push(Refresh.getFamilyByType(exportValue));\n    }\n    return signature;\n  };\n  var registerExportsForReactRefresh = (Refresh, moduleExports, moduleID) => {\n    Refresh.register(moduleExports, moduleID + \" %exports%\");\n    if (moduleExports == null || typeof moduleExports !== \"object\") {\n      // Exit if we can't iterate over exports.\n      // (This is important for legacy environments.)\n      return;\n    }\n    for (const key in moduleExports) {\n      const desc = Object.getOwnPropertyDescriptor(moduleExports, key);\n      if (desc && desc.get) {\n        // Don't invoke getters as they may have side effects.\n        continue;\n      }\n      const exportValue = moduleExports[key];\n      const typeID = moduleID + \" %exports% \" + key;\n      Refresh.register(exportValue, typeID);\n    }\n  };\n  global.__accept = metroHotUpdateModule;\n}\nif (__DEV__) {\n  // The metro require polyfill can not have module dependencies.\n  // The Systrace and ReactRefresh dependencies are, therefore, made publicly\n  // available. Ideally, the dependency would be inversed in a way that\n  // Systrace / React